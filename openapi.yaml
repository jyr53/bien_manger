openapi: 3.0.3
info:
title: Swagger bien-manger - OpenAPI 3.0
description: |-
This is the Recipe API Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
termsOfService: http://swagger.io/terms/
contact:
email: stephane.pau@smartmoov.solutions
license:
name: Apache 2.0
url: http://www.apache.org/licenses/LICENSE-2.0.html
version: 1.0.0
externalDocs:
description: Find out more about Swagger
url: http://swagger.io
servers:
- url: http://localhost:4000
tags:
- name: recipe
description: Endpoints for marmiton's recipes
externalDocs:
description: More on github
url: https://github.com
paths:
/recipe/list:
get:
tags:
- recipe
summary: Get all recipes
description: Update an existing pet by Id
operationId: getRecipe
parameters:
- name: limit
in: query
schema:
type: integer
- name: offset
in: query
schema:
type: integer
format: int64
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/Recipe'
'400':
description: Invalid ID supplied
'401':
description: not authorized
security:
- petstore_auth:
- read:Recipes
/recipe/show/{id}:
get:
tags:
- recipe
summary: show recipe with ID id
description: ''
operationId: uploadFile
parameters:
- name: id
in: path
description: ID of pet to update
required: true
schema:
type: integer
format: int64
responses:
'200':
description: successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/ApiResponse'
security:
- petstore_auth:
- read:pets
/recipe/add:
post:
tags:
- recipe
summary: Add a new recipe to the web site
description: Add a new recipe to the store
operationId: addRecipe
requestBody:
description: Create a new recipe in the store
content:
application/json:
schema:
$ref: '#/components/schemas/Recipe'
required: true
responses:
'200':
description: Successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/Recipe'
'400':
description: Invalid input
security:
- petstore_auth:
- write:Recipes
/recipe/findByStatus:
get:
tags:
- recipe
summary: Finds recipes by status
description: Multiple status values can be provided with comma separated strings
operationId: findRecipesByStatus
parameters:
- name: status
in: query
description: Status values that need to be considered for filter
required: false
explode: true
schema:
type: string
default: pending
enum:
- published
- pending
- refused
- to-modified
responses:
'200':
description: successful operation
content:
application/json:
schema:
type: array
items:
$ref: '#/components/schemas/Recipe'
'400':
description: Invalid status value
security:
- petstore_auth:
- write:pets
/recipe/delete/{id}:
delete:
tags:
- recipe
parameters:
- name: id
in: path
required: true
schema:
type: integer
format: int64
responses:
'200':
description: successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/ApiResponse'
security:
- petstore_auth:
- write:recipes
/recipe/{id}:
put:
tags:
- recipe
summary: Modify a recipe
description: ''
operationId: show
parameters:
- name: id
in: path
description: ID of recipe to update
required: true
schema:
type: integer
format: int64
responses:
'200':
description: successful operation
content:
application/json:
schema:
$ref: '#/components/schemas/ApiResponse'
security:
- petstore_auth:
- write:pets
- read:pets
components:
schemas:
Recipe:
required:
- name
- slug
- guests
- user_id
type: object
properties:
id:
type: integer
format: int64
description: unique ID
example: 102
name:
type: string
example: Tomates Mozarella
description: nom de la recette
slug:
type: string
example: tomates-mozza
description: path (uri) of a recipe
description:
type: string
example: Une excellentte recette. Idéale pour se rafraichie en été
description: give information about the recipe
guests:
type: integer
example: 4
description: indicates how many people this recipe is for
user_id:
type: integer
example: 45
description: who posts the recipe
User:
type: object
properties:
id:
type: integer
format: int64
example: 10
username:
type: string
example: theUser
firstName:
type: string
example: John
lastName:
type: string
example: James
email:
type: string
example: john@email.com
password:
type: string
example: '12345'
phone:
type: string
example: '12345'
userStatus:
type: integer
description: User Status
format: int32
example: 1
xml:
name: user
ApiResponse:
type: object
properties:
code:
type: integer
format: int32
type:
type: string
message:
type: string
xml:
name: '##default'
requestBodies:
Pet:
description: Pet object that needs to be added to the store
content:
application/json:
schema:
$ref: '#/components/schemas/Recipe'
application/xml:
schema:
$ref: '#/components/schemas/Recipe'
UserArray:
description: List of user object
content:
application/json:
schema:
type: array
items:
$ref: '#/components/schemas/User'
securitySchemes:
petstore_auth:
type: oauth2
flows:
implicit:
authorizationUrl: https://petstore3.swagger.io/oauth/authorize
scopes:
write:pets: modify pets in your account
read:pets: read your pets
api_key:
type: apiKey
name: api_key
in: header